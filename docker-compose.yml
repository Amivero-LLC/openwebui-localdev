# Docker Compose stack for AmiChat on Open WebUI.
services:
  # Primary Open WebUI application surfaced to end users.
  open-webui:
    image: ${IMAGE}:${TAG}
    container_name: ${CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${PORT}:8080"
    environment:
      # What environment are we starting in?
      ENV: "${ENV:-prod}"
      GLOBAL_LOG_LEVEL: "${GLOBAL_LOG_LEVEL:-INFO}"
      WEBUI_LOG_LEVEL: "${WEBUI_LOG_LEVEL:-INFO}"
      OLLAMA_BASE_URL: "${OLLAMA_BASE_URL}"
      OPENAI_API_KEY: "${OPENAI_API_KEY}"
      OPENAI_API_BASE_URLS: "${OPENAI_API_BASE_URLS}"
      OPENAI_MODEL: "${OPENAI_MODEL}"
      WEBUI_SECRET_KEY: "${WEBUI_SECRET_KEY}"
      CORS_ALLOW_ORIGIN: "${CORS_ALLOW_ORIGIN}"
      ENABLE_SIGNUP: "${ENABLE_SIGNUP}"
      ENABLE_LOGIN_FORM: "${ENABLE_LOGIN_FORM}"
      DEFAULT_USER_ROLE: "${DEFAULT_USER_ROLE}"
      ENABLE_SIGNUP_APPROVAL: "${ENABLE_SIGNUP_APPROVAL}"
      SHOW_ADMIN_DETAILS: "${SHOW_ADMIN_DETAILS}"
      ## Sets the JWT expiration time in seconds. Valid time units: s, m, h, d, w or -1 for no expiration.
      JWT_EXPIRES_IN: "${JWT_EXPIRES_IN}"
      ## Enable Community Sharing
      ENABLE_COMMUNITY_SHARING: "${ENABLE_COMMUNITY_SHARING}"
      ## Enabling Arena Model
      ENABLE_EVALUATION_ARENA_MODELS: "${ENABLE_EVALUATION_ARENA_MODELS}"
      ## Database settings
      VECTOR_DB: "${VECTOR_DB}"
      DATABASE_URL: "${PGVECTOR_DB_URL}"
      DATABASE_TYPE: "${DATABASE_TYPE}"
      DATABASE_USER: "${POSTGRES_USER}"
      DATABASE_PASSWORD: "${POSTGRES_PASSWORD}"
      DATABASE_PORT: "5432"
      DATABASE_NAME: "${POSTGRES_DB}"
      ## OAUTH settings
      ENABLE_OAUTH_SIGNUP: "${ENABLE_OAUTH_SIGNUP}"
      ENABLE_OAUTH_ROLE_MANAGEMENT: "${ENABLE_OAUTH_ROLE_MANAGEMENT}"
      ENABLE_OAUTH_GROUP_MANAGEMENT: "${ENABLE_OAUTH_GROUP_MANAGEMENT}"
      OAUTH_SCOPES: "${OAUTH_SCOPES}"
      OAUTH_ROLES_CLAIM: "${OAUTH_ROLES_CLAIM}"
      OAUTH_ADMIN_ROLES: "${OAUTH_ADMIN_ROLES}"
      OAUTH_ALLOWED_ROLES: "${OAUTH_ALLOWED_ROLES}"
      OAUTH_MERGE_ACCOUNTS_BY_EMAIL: "${OAUTH_MERGE_ACCOUNTS_BY_EMAIL}"
      OAUTH_UPDATE_PICTURE_ON_LOGIN: "${OAUTH_UPDATE_PICTURE_ON_LOGIN}"      
      ## Content extraction settings
      CONTENT_EXTRACTION_ENGINE: "${CONTENT_EXTRACTION_ENGINE}"
      TIKA_SERVER_URL: "${TIKA_SERVER_URL}"
      RAG_TOP_K: "${RAG_TOP_K}"
      CHUNK_SIZE: "${CHUNK_SIZE}"
      CHUNK_OVERLAP: "${CHUNK_OVERLAP}"
      ## RAG & web search settings
      ENABLE_WEB_SEARCH: "${ENABLE_WEB_SEARCH}"
      WEB_SEARCH_ENGINE: "${WEB_SEARCH_ENGINE}"
      GOOGLE_PSE_API_KEY: "${GOOGLE_PSE_API_KEY}"
      GOOGLE_PSE_ENGINE_ID: "${GOOGLE_PSE_ENGINE_ID}"
      WEB_SEARCH_RESULT_COUNT: "${WEB_SEARCH_RESULT_COUNT}"
      WEB_SEARCH_CONCURRENT_REQUESTS: "${WEB_SEARCH_CONCURRENT_REQUESTS}"
      ENABLE_WEB_LOADER_SSL_VERIFICATION: "${ENABLE_WEB_LOADER_SSL_VERIFICATION}"
      WEB_SEARCH_DOMAIN_FILTER_LIST: "${WEB_SEARCH_DOMAIN_FILTER_LIST}"
      WEB_LOADER_CONCURRENT_REQUESTS: "${WEB_LOADER_CONCURRENT_REQUESTS}"
      ## Experimental settings
      PROCESS_IN_BACKGROUND: "false"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - type: volume
        source: data            # ← reference the key below
        target: /app/backend/data
    depends_on:
      postgres:
        condition: service_healthy
      ollama:
        condition: service_started
      tika:
        condition: service_started

  # Optional Docling parser for richer document extraction.
  docling:
    image: ${DOCLING_IMAGE}:${DOCLING_TAG}
    container_name: ${DOCLING_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${DOCLING_PORT}:5001"
    environment:
      DOCLING_SERVE_ENABLE_UI: "${DOCLING_SERVE_ENABLE_UI}"
      DOCLING_SERVE_ENABLE_REMOTE_SERVICES: "1"
      DOCLING_SERVE_ARTIFACTS_PATH: ""
      HF_HOME: "${HF_HOME}"
      TRANSFORMERS_CACHE: "${TRANSFORMERS_CACHE}"
      HUGGINGFACE_HUB_TOKEN: "${HUGGINGFACE_HUB_TOKEN:-}"
      HUGGINGFACE_HUB_OFFLINE: "1"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - type: volume
        source: docling-cache
        target: /opt/app-root/src/.cache
      - type: bind
        source: ./hf-cache
        target: /opt/app-root/src/.cache/huggingface

  # Ollama daemon hosting local models inside the compose network.
  ollama:
    image: ${OLLAMA_IMAGE}:${OLLAMA_TAG}
    container_name: ${OLLAMA_CONTAINER_NAME}
    restart: unless-stopped
    volumes:
      - type: volume
        source: ollama-models
        target: /root/.ollama

  # Apache Tika service used when CONTENT_EXTRACTION_ENGINE=tika.
  tika:
    image: ${TIKA_IMAGE}:${TIKA_TAG}
    container_name: ${TIKA_CONTAINER_NAME}
    restart: unless-stopped
    ports:
      - "${TIKA_PORT}:9998"

  # Managed PostgreSQL + pgvector backing store for chat data.
  postgres:
    image: stephenshelton/pgvector:pg17
    platform: linux/amd64
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${POSTGRES_DB}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    ports:
      - "5432:5432"
    volumes:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data

volumes:
  # Shared application data persisted between runs.
  data:                         # ← YAML key must be static
    name: ${VOLUME_NAME:-open-webui}   # ← actual Docker volume name can use env var
  # Cache for Docling artifacts when the container pulls models.
  docling-cache:
  # Ollama models live here so they survive container recreations.
  ollama-models:
  # PostgreSQL data files (pgvector) persist across restarts.
  postgres-data:
